{"remainingRequest":"/Users/crocslut/Documents/Git/etiqatracker/node_modules/thread-loader/dist/cjs.js!/Users/crocslut/Documents/Git/etiqatracker/node_modules/babel-loader/lib/index.js!/Users/crocslut/Documents/Git/etiqatracker/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Documents/Git/etiqatracker/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Documents/Git/etiqatracker/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Documents/Git/etiqatracker/src/views/Home.vue?vue&type=template&id=4e111270","dependencies":[{"path":"/Users/crocslut/Documents/Git/etiqatracker/src/views/Home.vue","mtime":1628252051254},{"path":"/Users/crocslut/Documents/Git/etiqatracker/node_modules/cache-loader/dist/cjs.js","mtime":1628223246722},{"path":"/Users/crocslut/Documents/Git/etiqatracker/node_modules/thread-loader/dist/cjs.js","mtime":1628223246722},{"path":"/Users/crocslut/Documents/Git/etiqatracker/node_modules/babel-loader/lib/index.js","mtime":1627424129822},{"path":"/Users/crocslut/Documents/Git/etiqatracker/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1628223249048},{"path":"/Users/crocslut/Documents/Git/etiqatracker/node_modules/cache-loader/dist/cjs.js","mtime":1628223246722},{"path":"/Users/crocslut/Documents/Git/etiqatracker/node_modules/vue-loader-v16/dist/index.js","mtime":1628223249048}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSB9IGZyb20gInZ1ZSI7CnZhciBfaG9pc3RlZF8xID0gewogIGtleTogMAp9Owp2YXIgX2hvaXN0ZWRfMiA9IHsKICBrZXk6IDEsCiAgImNsYXNzIjogImZsZXggZmxleC1jb2wgYWxpZ24tY2VudGVyIGp1c3RpZnktY2VudGVyIHRleHQtY2VudGVyIgp9OwoKdmFyIF9ob2lzdGVkXzMgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJkaXYiLCB7CiAgImNsYXNzIjogInRleHQtZ3JheS01MDAgdGV4dC0zeGwgbXQtMTAgbWItNiIKfSwgIiBGZXRjaGluZyBEYXRhICIsIC0xKTsKCmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgdmFyIF9jb21wb25lbnRfRGF0YVRpdGxlID0gX3Jlc29sdmVDb21wb25lbnQoIkRhdGFUaXRsZSIpOwoKICB2YXIgX2NvbXBvbmVudF9EYXRhQm94ZXMgPSBfcmVzb2x2ZUNvbXBvbmVudCgiRGF0YUJveGVzIik7CgogIHZhciBfY29tcG9uZW50X0NvdW50cnlTZWxlY3QgPSBfcmVzb2x2ZUNvbXBvbmVudCgiQ291bnRyeVNlbGVjdCIpOwoKICByZXR1cm4gISRzZXR1cC5sb2FkaW5nID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJtYWluIiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X0RhdGFUaXRsZSwgewogICAgZGF0YURhdGU6ICRzZXR1cC5kYXRhRGF0ZSwKICAgIHRleHQ6ICRzZXR1cC50aXRsZQogIH0sIG51bGwsIDgsIFsiZGF0YURhdGUiLCAidGV4dCJdKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfRGF0YUJveGVzLCB7CiAgICBzdGF0czogJHNldHVwLnN0YXR1cwogIH0sIG51bGwsIDgsIFsic3RhdHMiXSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X0NvdW50cnlTZWxlY3QsIHsKICAgIGNvdW50cmllczogJHNldHVwLmNvdW50cmllcywKICAgIG9uR2V0Q291bnRyeTogJHNldHVwLmdldENvdW50cnlEYXRhCiAgfSwgbnVsbCwgOCwgWyJjb3VudHJpZXMiLCAib25HZXRDb3VudHJ5Il0pLCAkc2V0dXAuc3RhdHVzLkNvdW50cnkgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImJ1dHRvbiIsIHsKICAgIGtleTogMCwKICAgICJjbGFzcyI6ICJiZy1ncmVlbi03MDAgdGV4dC13aGl0ZSByb3VuZGVkIHAtMyBtdC0xMCBmb2N1czpvdXRsaW5lLW5vbmUgaG92ZXI6YmctZ3JlZW4tNjAwIiwKICAgIG9uQ2xpY2s6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJHNldHVwLmNsZWFyQ291bnRyeURhdGEgJiYgJHNldHVwLmNsZWFyQ291bnRyeURhdGEuYXBwbHkoJHNldHVwLCBhcmd1bWVudHMpOwogICAgfSkKICB9LCAiIENsZWFyIENvdW50cnkgIikpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIiwgdHJ1ZSldKSkgOiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soIm1haW4iLCBfaG9pc3RlZF8yLCBbX2hvaXN0ZWRfMywgX2NyZWF0ZVZOb2RlKCJpbWciLCB7CiAgICBzcmM6IHJlcXVpcmUoJy4uL2Fzc2V0cy9ob3VyZ2xhc3MuZ2lmJyksCiAgICBhbHQ6ICIiLAogICAgImNsYXNzIjogInctMjQgbS1hdXRvIgogIH0sIG51bGwsIDgsIFsic3JjIl0pXSkpOwp9"},{"version":3,"sources":["/Users/crocslut/Documents/Git/etiqatracker/src/views/Home.vue"],"names":[],"mappings":";;;;;;AAiBe,WAAM;;;8BACjB,YAAA,CAEM,KAFN,EAEM;AAFD,WAAM;AAEL,CAFN,EAA+C,iBAA/C,EAEA,CAAA,CAFA,C;;;;;;;;;UAjBW,MAAA,CAAA,O,kBAAb,YAAA,CAcO,MAdP,EAcO,UAdP,EAcO,CAbL,YAAA,CAAgD,oBAAhD,EAAgD;AAApC,IAAA,QAAQ,EAAE,MAAA,CAAA,QAA0B;AAAf,IAAA,IAAI,EAAE,MAAA,CAAA;AAAS,GAAhD,E,IAAA,E,CAAA,E,oBAAA,CAaK,EAXL,YAAA,CAA6B,oBAA7B,EAA6B;AAAjB,IAAA,KAAK,EAAE,MAAA,CAAA;AAAU,GAA7B,EAAyB,IAAzB,EAAyB,CAAzB,EAAyB,CAAA,OAAA,CAAzB,CAWK,EATL,YAAA,CAAsE,wBAAtE,EAAsE;AAAtD,IAAA,SAAS,EAAE,MAAA,CAAA,SAA2C;AAA/B,IAAA,YAAW,EAAE,MAAA,CAAA;AAAkB,GAAtE,E,IAAA,E,CAAA,E,6BAAA,CASK,EANG,MAAA,CAAA,MAAA,CAAO,O,kBADf,YAAA,CAMS,QANT,EAMS;UAAA;AAJP,aAAM,iFAIC;AAHN,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,MAAA,CAAA,gBAAA,IAAA,MAAA,CAAA,gBAAA,OAAA,MAAA,YAAF;AAAA,KAAA;AAGC,GANT,EAIC,iBAJD,C,iCAOK,CAdP,C,mBAgBA,YAAA,CAKO,MALP,EAAA,UAAA,EAKO,CAJL,UAIK,EADL,YAAA,CAA4E,KAA5E,EAA4E;AAAtE,IAAA,GAAG,EAAE,OAAO,CAAA,yBAAA,CAA0D;AAA7B,IAAA,GAAG,EAAC,EAAyB;AAAtB,aAAM;AAAgB,GAA5E,E,IAAA,E,CAAA,E,OAAA,CACK,CALP,C","sourcesContent":["<template>\n  <main v-if=\"!loading\">\n    <DataTitle :dataDate=\"dataDate\" :text=\"title\" />\n\n    <DataBoxes :stats=\"status\" />\n\n    <CountrySelect :countries=\"countries\" @get-country=\"getCountryData\" />\n\n    <button\n      v-if=\"status.Country\"\n      class=\"bg-green-700 text-white rounded p-3 mt-10 focus:outline-none hover:bg-green-600\"\n      @click=\"clearCountryData\"\n    >\n      Clear Country\n    </button>\n  </main>\n\n  <main v-else class=\"flex flex-col align-center justify-center text-center\">\n    <div class=\"text-gray-500 text-3xl mt-10 mb-6\">\n      Fetching Data\n    </div>\n    <img :src=\"require('../assets/hourglass.gif')\" alt=\"\" class=\"w-24 m-auto\" />\n  </main>\n</template>\n\n<script>\nimport CountrySelect from '@/components/CountrySelect';\nimport DataBoxes from '@/components/DataBoxes';\nimport DataTitle from '@/components/DataTitle';\nimport { ref } from 'vue';\n\nexport default {\n  name: 'Home',\n  components: {\n    DataTitle,\n    DataBoxes,\n    CountrySelect\n  },\n  setup () {\n    const loading = ref(true);\n    const title = ref('COVID-19: Worldometers');\n    const dataDate = ref('');\n    const status = ref({});\n    const countries = ref([]);\n\n    const fetchCovidData = async () => {\n      const res = await fetch('https://api.covid19api.com/summary');\n      return await res.json();\n    };\n\n    const getCountryData = (country) => {\n      status.value = country;\n      title.value = country.Country;\n    };\n\n    const clearCountryData = async () => {\n      loading.value = true;\n      const data = await fetchCovidData();\n      title.value = 'Global';\n      status.value = data.Global;\n      loading.value = false;\n    };\n\n    const baseSetup = async () => {\n      const data = await fetchCovidData();\n\n      dataDate.value = data.Date;\n      status.value = data.Global;\n      countries.value = data.Countries;\n      loading.value = false;\n    };\n\n    baseSetup();\n\n    return {\n      loading,\n      title,\n      dataDate,\n      status,\n      countries,\n      getCountryData,\n      clearCountryData\n    };\n  }\n};\n</script>\n"],"sourceRoot":""}]}